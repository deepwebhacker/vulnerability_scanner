#!/usr/bin/env python3
import os, sys, subprocess, threading, time, hashlib, platform
from tkinter import *
from tkinter.ttk import *
from tkinter import messagebox
from ttkthemes import ThemedStyle
from PIL import ImageTk, Image

class MainWindow(Tk):
    def __init__(self):
        Tk.__init__(self)
        self.title(string = " << Vulnerability Scanner v2 >> ")
        self.resizable(0,0)
        #self.style = Style()
        #self.style.theme_use("clam")
        self.ttkStyle = ThemedStyle()
        self.ttkStyle.set_theme("ubuntu")
        self.configure(background = 'white')

        self.options = {
            'host' : StringVar(),
            'name' : StringVar(),
            'range' : StringVar(),
            'target_list' : StringVar(),
        }

        self.options['host'].set('0.0.0.0')
        self.options['name'].set('localhost')
        self.options['range'].set('21-80')
        self.options['target_list'].set('./targets.csv')

        self.protocol("WM_DELETE_WINDOW", self.exit) # close all windows on exit app

        settings = LabelFrame(self, text = 'Settings', relief = GROOVE, labelanchor = 'nw', width = 442, height = 150)
        settings.grid(row = 0, column = 1)
        settings.grid_propagate(0)

        # Host entry
        Label(settings, text = 'Host:').grid(row = 0, column = 1)
        Entry(settings, textvariable = self.options['host']).grid(row = 0, column = 2, columnspan = 2)

        # Name entry
        Label(settings, text = 'Name:').grid(row = 1, column = 1)
        Entry(settings, textvariable = self.options['name']).grid(row = 1, column = 2, columnspan = 2)

        # Range entry
        Label(settings, text = 'Range:').grid(row = 2, column = 1)
        Entry(settings, textvariable = self.options['range']).grid(row = 2, column = 2, columnspan = 2)

        # Target list location
        Label(settings, text = 'Targets list location:').grid(row = 3, column = 1)
        Entry(settings, textvariable = self.options['target_list']).grid(row = 3, column = 2, columnspan = 2)

        # Select script frame
        select_script = LabelFrame(self, text = 'Script & Targets', relief = GROOVE, labelanchor = 'nw', width = 440, height = 400)
        select_script.grid(row = 3, column = 1)
        select_script.grid_propagate(0)

        # Select Script
        self.options['scripts'] = Listbox(select_script, width = 300, height = 10)
        self.options['scripts'].grid(row = 4, column = 1)
        self.options['targets'] = Listbox(select_script, width = 300, height = 15)
        self.options['targets'].grid(row = 5, column = 1, rowspan = 10)

        self.options['scripts'].insert(END, 'Select Script')

        # For scripts in current dir, append scripts
        for path, subdirs, files in os.walk('.'):
            for name in files:
                if name.endswith('.nse'):
                    self.options['scripts'].insert(END, path + '/' + name)

        self.options['targets'].insert(END, 'Targets')

        # Log Frame
        result = LabelFrame(self, text = 'Result', relief = GROOVE)
        result.grid(row = 0, column = 2, rowspan = 6, columnspan = 2)
        self.options['log'] = Text(result, foreground="white", background="black", highlightcolor="white", highlightbackground="black", height = 38, width = 140)
        self.options['log'].grid(row = 0, column = 1)

        # Tags
        self.options['log'].tag_configure('yellow', foreground='yellow')
        self.options['log'].tag_configure('red', foreground='red')
        self.options['log'].tag_configure('deeppink', foreground='deeppink')
        self.options['log'].tag_configure('orange', foreground='orange')
        self.options['log'].tag_configure('green', foreground='green')
        self.options['log'].tag_configure('bold', font='bold')

        self.options['log'].insert('1.0', 'Set Hosts, range and script, then click Scan!\n', 'bold')

        # Append Targets
        append_host_button = Button(self, text = "Append Host to targets", command = self.append_host, width = 53).grid(row = 1, column = 0, columnspan = 2)
        append_list_button = Button(self, text = "Append targets from list", command = self.append_list, width = 53).grid(row = 2, column = 0, columnspan = 2)

        # Bottom buttons
        remove_target = Button(self, text = "Clear target list", command = self.remove_target, width = 53).grid(row = 4, column = 0, columnspan = 2)
        scan_button = Button(self, text = "Scan!", command = self.scan, width = 53).grid(row = 5, column = 0, columnspan = 2)

    def remove_target(self):
        self.options['targets'].delete(0, END)
        self.options['targets'].insert(END, 'Targets')

    def append_host(self):
        #print('host appended')
        self.options['targets'].insert(END, self.options['host'].get() + ',' + self.options['name'].get())

    def append_list(self):
        try:
            f = open(self.options['target_list'].get()).readlines()
            del f[0]
            # Append targets
            for i in f:
                self.options['targets'].insert(END, i.strip())
        except Exception as e:
            self.options['log'].insert('1.0', '[ERROR] Failed to open file: %s\n' % e, 'red')


    def scan(self):
        try:
            try:
                script = self.options['scripts'].get(self.options['scripts'].curselection())
                script = script.strip()
            except Exception:
                script = None

            self.options['log'].insert('1.0', 'Selected script: %s\n' % script, 'deeppink')
            self.options['log'].insert('1.0', '[%s] Scan started\n' % time.strftime('%X'), 'yellow')

            # Output header
            #header = 'Client'.ljust(30), 'Address'.ljust(20), 'Port'.ljust(15), 'Service'.ljust(46), 'Status'
            #self.options['log'].insert('1.0', '{0[0]} {0[1]} {0[2]} {0[3]} {0[4]}\n'.format(header), 'yellow')

            # Change to stop scan button
            #scan_button = Button(self, text = "Cancel Scan!", command = self.stop_scan, width = 53, height = 5).grid(row = 5, column = 0, columnspan = 2)

            global targets
            targets = []
            clients = []

            for target in self.options['targets'].get(0, END):
                targets.append(target)

            del targets[0] # Delete header

            # Create output directory
            if not os.path.isdir('result/'):
                os.makedirs('result/')

            if self.options['range'].get() == '0':
                p_range = ''
            else:
                p_range = '-p ' + self.options['range'].get()

            # Start scanning
            for i in targets:
                target = i.split(',')[0]
                name = i.split(',')[1]
                self.start_scan(name, target, script, p_range)

        except Exception as e:
            self.options['log'].insert('1.0', '[%s] [ERROR] %s\n' % (time.strftime('%X'), e), 'red')

    def exit(self):
        sys.exit(0)

    def start_scan(self, client, target, script, p_range):
        if script == None:
            script = ''
        else:
            script = '-sV --script ' + script

        try:
            if '/' in target:
                save_file = target.replace('/', '-') # '/' is a illegal character for file names, replace it with a dash (-)
            else:
                save_file = target

            # Starts Scan, wait for it to finish before getting results.
            _scan = subprocess.Popen(['nmap %s %s %s --system-dns --open -vv > result/%s.txt' % (script, p_range, target, save_file)], stdout=subprocess.PIPE, shell=True).wait()

            client_id = 0 # ID for list: clients = []
            port = ''
            ports = []
            status = []
            d = []
            fid = 0

            result = open('result/%s.txt' % save_file, 'r').readlines()

            for i in result:
                if i.startswith('Nmap scan report for '):
                    d.append(i.split(' ')[-1].replace('(', '').replace(')', '').strip())

                if i[0].isdigit():
                    #print(i)
                    if not 'unrecognized' in i:
                        port = i.split('/')[0].strip()
                        if port[1].startswith('u'):
                            t = '/udp'
                            ports.append(port + t)
                            status.append('[NOT VULNERABLE]')
                        else:
                            t = '/tcp'
                            ports.append(port + t)
                            status.append('[NOT VULNERABLE]')

                # Change status to vulnerable, if they appear to be.
                elif 'State: LIKELY VULNERABLE' in i:
                    rep = len(ports) -1
                    status[int(rep)] = '[LIKELY VULNERABLE]'
                elif 'State: VULNERABLE' in i:
                    rep = len(ports) -1
                    status[int(rep)] = '[VULNERABLE]'

                service = script.replace('-sV --script ', '').split('/')[-1]

            # Print final result for each port
            for i in ports:
                if d: # If it was a range, 'd' contains addresses
                    for ip in d: # print result for each ip in range that was scanned
                        #final = clients[int(client_id)].ljust(30) + d[0].ljust(30) + ports[int(fid)].ljust(15) + service.ljust(40) + status[int(fid)]
                        final = client.ljust(20) + d[0].ljust(40) + ports[int(fid)].ljust(20) + service.ljust(40) + status[int(fid)]
                        if 'NOT VULNERABLE' in final:
                            self.options['log'].insert('1.0', final + '\n', 'green')
                            print(final)
                        else:
                            self.options['log'].insert('1.0', final + '\n', 'red')
                            print(final)
                        d.remove(d[0]) # Remove the first item until no items left
                else:
                    final = client.ljust(20) + target.ljust(40) + ports[int(fid)].ljust(20) + service.ljust(40) + status[int(fid)]
                    if 'NOT VULNERABLE' in final:
                        self.options['log'].insert('1.0', final + '\n', 'green')
                        print(final)
                    else:
                        self.options['log'].insert('1.0', final + '\n', 'red')
                        print(final)
                fid +=1

            # Reset
            fid = 0
            client_id +=1
            ports = []; status = []
        except Exception as e:
            print('\033[1;91m[ ERROR ]\033[0m %s' % e)
            pass

        self.options['log'].insert('1.0', '[%s] Scan completed for target <%s>\n' % (time.strftime('%X'), target), 'yellow')

main = MainWindow()
main.mainloop()
